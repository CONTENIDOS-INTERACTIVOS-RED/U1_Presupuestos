{"remainingRequest":"/home/runner/work/U1_Presupuestos/U1_Presupuestos/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Presupuestos/U1_Presupuestos/src/views/curso/Tema2.vue?vue&type=template&id=2550cb3c&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Presupuestos/U1_Presupuestos/src/views/curso/Tema2.vue","mtime":1740405513594},{"path":"/home/runner/work/U1_Presupuestos/U1_Presupuestos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Presupuestos/U1_Presupuestos/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Presupuestos/U1_Presupuestos/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Presupuestos/U1_Presupuestos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Presupuestos/U1_Presupuestos/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}